//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//     Исполняемая версия:4.0.30319.42000
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторной генерации кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ClientWTP.WTP {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="WTPResponse", Namespace="http://schemas.datacontract.org/2004/07/ServerWTP")]
    [System.SerializableAttribute()]
    public partial class WTPResponse : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private byte[] binaryField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string headerField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool successField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public byte[] binary {
            get {
                return this.binaryField;
            }
            set {
                if ((object.ReferenceEquals(this.binaryField, value) != true)) {
                    this.binaryField = value;
                    this.RaisePropertyChanged("binary");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string header {
            get {
                return this.headerField;
            }
            set {
                if ((object.ReferenceEquals(this.headerField, value) != true)) {
                    this.headerField = value;
                    this.RaisePropertyChanged("header");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool success {
            get {
                return this.successField;
            }
            set {
                if ((this.successField.Equals(value) != true)) {
                    this.successField = value;
                    this.RaisePropertyChanged("success");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="WTP.IService1")]
    public interface IService1 {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/ConvertWithMM", ReplyAction="http://tempuri.org/IService1/ConvertWithMMResponse")]
        ClientWTP.WTP.WTPResponse ConvertWithMM(byte[] binary);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/ConvertWithMM", ReplyAction="http://tempuri.org/IService1/ConvertWithMMResponse")]
        System.Threading.Tasks.Task<ClientWTP.WTP.WTPResponse> ConvertWithMMAsync(byte[] binary);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/ConvertWithWord", ReplyAction="http://tempuri.org/IService1/ConvertWithWordResponse")]
        ClientWTP.WTP.WTPResponse ConvertWithWord(byte[] binary);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/ConvertWithWord", ReplyAction="http://tempuri.org/IService1/ConvertWithWordResponse")]
        System.Threading.Tasks.Task<ClientWTP.WTP.WTPResponse> ConvertWithWordAsync(byte[] binary);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IService1Channel : ClientWTP.WTP.IService1, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class Service1Client : System.ServiceModel.ClientBase<ClientWTP.WTP.IService1>, ClientWTP.WTP.IService1 {
        
        public Service1Client() {
        }
        
        public Service1Client(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public Service1Client(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public Service1Client(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public Service1Client(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public ClientWTP.WTP.WTPResponse ConvertWithMM(byte[] binary) {
            return base.Channel.ConvertWithMM(binary);
        }
        
        public System.Threading.Tasks.Task<ClientWTP.WTP.WTPResponse> ConvertWithMMAsync(byte[] binary) {
            return base.Channel.ConvertWithMMAsync(binary);
        }
        
        public ClientWTP.WTP.WTPResponse ConvertWithWord(byte[] binary) {
            return base.Channel.ConvertWithWord(binary);
        }
        
        public System.Threading.Tasks.Task<ClientWTP.WTP.WTPResponse> ConvertWithWordAsync(byte[] binary) {
            return base.Channel.ConvertWithWordAsync(binary);
        }
    }
}
